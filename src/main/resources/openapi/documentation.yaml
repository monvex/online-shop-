openapi: "3.0.3"
info:
  title: "com_example_online_shop API"
  description: "com_example_online_shop API"
  version: "1.0.0"
servers:
- url: "https://com_example_online_shop"
paths:
  /ws:
    get:
      description: ""
      parameters:
      - name: "Connection"
        in: "header"
        required: true
        description: "Websocket Connection parameter"
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        description: "Websocket Upgrade parameter"
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        description: "Websocket Sec-WebSocket-Key parameter"
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /items:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "integer"
      - name: "size"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ItemDTO"
  /items/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Такого товара не существует"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Такого товара не существует"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemDTO"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/ItemDTO"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /items/add:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/ItemReceiveRemote"
        required: true
      responses:
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Такой товар уже существует"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Название категории не может быть пустым"
                Example#2:
                  value: "Такой категории или такого бренда не существует"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /brands:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/BrandDTO"
  /brands/{title}:
    delete:
      description: ""
      parameters:
      - name: "title"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Такого бренда не существует"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: ""
      parameters:
      - name: "title"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/CategoriesReceiveRemote"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /brands/add:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/CategoriesReceiveRemote"
        required: true
      responses:
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Такой бренд уже существует"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Название бренда не может быть пустым"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /images:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "string"
              examples:
                Example#1:
                  description: ""
                  value: []
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Ни одной фотографии не найдено"
  /images/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Файла с таким id не существует"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocalFileContent"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Файла с таким id не существует"
  /images/upload:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ImageDTO"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Файл с таким названием уже существует"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
  /categories:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryDTO"
  /categories/{title}:
    delete:
      description: ""
      parameters:
      - name: "title"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Такой категории не существует"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: ""
      parameters:
      - name: "title"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/CategoriesReceiveRemote"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /categories/add:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/CategoriesReceiveRemote"
        required: true
      responses:
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Такая категория уже существует"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Название категории не может быть пустым"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
components:
  schemas:
    ItemDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        itemTitle:
          type: "string"
        brand:
          type: "string"
        category:
          type: "string"
      required:
      - "itemTitle"
      - "brand"
      - "category"
    ItemReceiveRemote:
      type: "object"
      properties:
        itemTitle:
          type: "string"
        brand:
          type: "string"
        category:
          type: "string"
      required:
      - "itemTitle"
      - "brand"
      - "category"
    BrandDTO:
      type: "object"
      properties:
        brandTitle:
          type: "string"
      required:
      - "brandTitle"
    CategoriesReceiveRemote:
      type: "object"
      properties:
        title:
          type: "string"
      required:
      - "title"
    File:
      type: "object"
      properties:
        path:
          type: "string"
    HeaderValueParam:
      type: "object"
      properties:
        name:
          type: "string"
        value:
          type: "string"
        escapeValue:
          type: "boolean"
      required:
      - "name"
      - "value"
    ContentType:
      type: "object"
      properties:
        contentType:
          type: "string"
        contentSubtype:
          type: "string"
        parameters:
          type: "array"
          items:
            $ref: "#/components/schemas/HeaderValueParam"
      required:
      - "contentType"
      - "contentSubtype"
      - "parameters"
    LocalFileContent:
      type: "object"
      properties:
        file:
          $ref: "#/components/schemas/File"
        contentType:
          $ref: "#/components/schemas/ContentType"
      required:
      - "file"
      - "contentType"
    ImageDTO:
      type: "object"
      properties:
        imageId:
          type: "string"
        fileName:
          type: "string"
      required:
      - "imageId"
      - "fileName"
    CategoryDTO:
      type: "object"
      properties:
        categoryTitle:
          type: "string"
      required:
      - "categoryTitle"